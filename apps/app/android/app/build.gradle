plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
//    id "com.newrelic.agent.android"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

android {
    namespace "com.change_application_name"


    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.change_application_name"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    signingConfigs {
        debug {
            def alias = System.getenv("SIGNING_KEY_ALIAS")
            def pass = System.getenv("SIGNING_PASSWORD")

            if(alias != null && pass != null){
                // Build with Git action.
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                def keystoreFile = allFilesFromDir.first()
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
            }else{
                // Build with local.
                storeFile file(localProperties.getProperty('keystore.file.debug'))
                keyAlias localProperties.getProperty('keystore.alias.debug')
                storePassword localProperties.getProperty('keystore.password.debug')
                keyPassword localProperties.getProperty('keystore.password.debug')
            }
        }
        release {
            def alias = System.getenv("SIGNING_KEY_ALIAS")
            def pass = System.getenv("SIGNING_PASSWORD")

            if(alias != null && pass != null){
                // Build with Git action.
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                def keystoreFile = allFilesFromDir.first()
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
            }else{
                // Build with local.
                storeFile file(localProperties.getProperty('keystore.file.release'))
                keyAlias localProperties.getProperty('keystore.alias.release')
                storePassword localProperties.getProperty('keystore.password')
                keyPassword localProperties.getProperty('keystore.password')
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // useProguard true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-debug-rules.pro'
        }

        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.1.5")
}



// ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
apply from: "flavorizr.gradle"
// ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----